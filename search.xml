<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 基本操作命令</title>
      <link href="/2022/11/14/Linux%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/11/14/Linux%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基本操作命令"><a href="#Linux-基本操作命令" class="headerlink" title="Linux 基本操作命令"></a>Linux 基本操作命令</h1><p><strong>1.cd 目录明 进入当前目录 或者用于切换目录</strong></p><p><strong>2.pwd 显示当前目录路径</strong></p><p><strong>3.ls 查看当前目录中的文件</strong></p><p><strong>4.mkdir 创建目录</strong></p><p><strong>5.rm 删除 rm -f 文件名 删除当前文件</strong></p><p><strong>6.mv 移动文件，或者更名</strong></p><p><strong>7.cp 复制命令 copy之意</strong></p><p><strong>8.tar 进行打包 解压命令</strong></p><p><strong>解压：tar -zxvf 压缩包</strong></p><p><strong>压缩：tar -zcvf 文件名</strong></p><p><strong>9.wq 命令保存文件 注需要按Esc跳转到命令模式</strong></p><p><strong>:wq 保存文件并退出</strong></p><p><strong>:wq！强制保存文件并退出</strong></p><p><strong>:q  不保存文件，退出</strong></p><p><strong>:q! 不保存文件 强制退出</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql基本crud命令</title>
      <link href="/2022/11/14/sql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/11/14/sql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="sql基本操作"><a href="#sql基本操作" class="headerlink" title="sql基本操作"></a>sql基本操作</h1><p><strong>添加:insert 表名 列名 values 列值</strong></p><p><strong>删除：delete from 表 where id=值</strong></p><p><strong>修改：update 表名 set 列 = 值 where 列= 修改条件</strong></p><p><strong>查询：select * from 表</strong></p><p><strong>双表查询：select * from user a 表 b where a.id=b.id and a.列 = ‘查询条件’</strong></p><p><strong>模糊查询：select * from user where name LIKE ‘%张%’查询包含张的记录</strong></p><h3 id="聚合函数-返回汇总值"><a href="#聚合函数-返回汇总值" class="headerlink" title="聚合函数 返回汇总值"></a>聚合函数 返回汇总值</h3><p><strong>AVG(表达式) 返回表达式中所有的平均值。仅用于数字列并自动忽略NULL值。<br>COUNT(表达式) 返回表达式中非NULL值的数量。可用于数字和字符列。<br>COUNT(*) 返回表中的行数(包括有NULL值的列)。<br>MAX(表达式) 返回表达式中的最大值,忽略NULL值。可用于数字、字符和日期时间列。<br>MIN(表达式) 返回表达式中的最小值,忽略NULL值。可用于数字、字符和日期时间列。<br>SUM(表达式) 返回表达式中所有的总和,忽略NULL值。仅用于数字列</strong></p>]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户中心项目</title>
      <link href="/2022/11/13/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
      <url>/2022/11/13/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="用户中心项目"><a href="#用户中心项目" class="headerlink" title="用户中心项目"></a><strong>用户中心项目</strong></h1><h4 id="完整了解做项目的思路-接触到企业级的开发技术"><a href="#完整了解做项目的思路-接触到企业级的开发技术" class="headerlink" title="完整了解做项目的思路 接触到企业级的开发技术"></a><strong>完整了解做项目的思路 接触到企业级的开发技术</strong></h4><h4 id="学习这个项目之后可以轻松做出某某管理系统-平台"><a href="#学习这个项目之后可以轻松做出某某管理系统-平台" class="headerlink" title="学习这个项目之后可以轻松做出某某管理系统/平台"></a><strong>学习这个项目之后可以轻松做出某某管理系统/平台</strong></h4><h2 id="企业做项目的流程"><a href="#企业做项目的流程" class="headerlink" title="企业做项目的流程"></a>企业做项目的流程</h2><h4 id="需求分析-分析合理性-gt-设计-概要设计-详细设计-数据库设计-代码设计-gt-技术选型-gt-初始化项目-引入需要的技术-组件-gt-写个Demo-完成一个测试-gt-写代码-实现业务逻辑-gt-测试-单元测试-gt-代码提交-让领导-同事看一下代码-代码评审-gt-部署-gt-发布"><a href="#需求分析-分析合理性-gt-设计-概要设计-详细设计-数据库设计-代码设计-gt-技术选型-gt-初始化项目-引入需要的技术-组件-gt-写个Demo-完成一个测试-gt-写代码-实现业务逻辑-gt-测试-单元测试-gt-代码提交-让领导-同事看一下代码-代码评审-gt-部署-gt-发布" class="headerlink" title="需求分析(分析合理性) =&gt; 设计(概要设计,详细设计,数据库设计,代码设计) =&gt; 技术选型 =&gt; 初始化项目/引入需要的技术/组件 =&gt; 写个Demo/完成一个测试 =&gt; 写代码(实现业务逻辑) =&gt; 测试(单元测试) =&gt; 代码提交(让领导/同事看一下代码)/代码评审 =&gt; 部署 =&gt; 发布"></a>需求分析(分析合理性) =&gt; 设计(概要设计,详细设计,数据库设计,代码设计) =&gt; 技术选型 =&gt; 初始化项目/引入需要的技术/组件 =&gt; 写个Demo/完成一个测试 =&gt; 写代码(实现业务逻辑) =&gt; 测试(单元测试) =&gt; 代码提交(让领导/同事看一下代码)/代码评审 =&gt; 部署 =&gt; 发布</h4><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h4 id="1-登录-注册"><a href="#1-登录-注册" class="headerlink" title="1.登录/注册"></a>1.登录/注册</h4><h4 id="2-用户管理-用户详情，仅管理员可见-对用户的crud"><a href="#2-用户管理-用户详情，仅管理员可见-对用户的crud" class="headerlink" title="2.用户管理(用户详情，仅管理员可见)对用户的crud"></a>2.用户管理(用户详情，仅管理员可见)对用户的crud</h4><h4 id="3-用户校验-仅某某用户"><a href="#3-用户校验-仅某某用户" class="headerlink" title="3.用户校验(仅某某用户)"></a>3.用户校验(<strong>仅某某用户</strong>)</h4><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h3><h5 id="前端：html-css-js-React-组件库-Ant-Design-Umi-Ant-Design-Pro-现成的管理系统"><a href="#前端：html-css-js-React-组件库-Ant-Design-Umi-Ant-Design-Pro-现成的管理系统" class="headerlink" title="前端：html + css + js + React + 组件库 Ant Design + Umi + Ant Design Pro(现成的管理系统)"></a>前端：html + css + js + React + 组件库 Ant Design + Umi + Ant Design Pro(现成的管理系统)</h5><h5 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h5><ul><li><strong>java</strong></li><li><strong>spring (依赖注入框架,帮助管理Java对象，集成一些其他内容)</strong></li><li><strong>springmvc （web框架，提供接口访问，restful接口能力）</strong></li><li><strong>mybatis （java操作数据库的框架，持久层框架，是根据jdbc进行封装）</strong></li><li><strong>mybatis-plus（对mybatis的增强，可以自动根据数据库生成基础crud代码）</strong></li><li><strong>springboot （不用自己管理spring配置，不用自己整合各种框架 优势：快速启动/快速集成项目）</strong></li></ul><h5 id="数据库：mysql"><a href="#数据库：mysql" class="headerlink" title="数据库：mysql"></a>数据库：mysql</h5><h5 id="部署：服务器-容器-平台"><a href="#部署：服务器-容器-平台" class="headerlink" title="部署：服务器/容器(平台)"></a>部署：服务器/容器(平台)</h5><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p><strong>1.初始化项目 20 min</strong></p><p>​    <strong>1.前端初始化</strong></p><p>​            <strong>1.初始化项目对✔</strong></p><p>​            <strong>2.引入组件之类的✔</strong></p><p>​            <strong>3.框架瘦身（因为不是所有的文件都用的到）✔</strong></p><p>​    <strong>2.后端初始化 20 min</strong></p><p>​            <strong>1.准备开发环境(Mysql之类的)✔</strong></p><p>​                <strong>1.使用idea自带的测试工具Database（在右边框）链接mysql数据库</strong>✔</p><p>​            <strong>2.引入开发框架(整合框架)✔</strong></p><p><strong>2.写代码</strong></p><p>​    <strong>1.登录/注册 20 min</strong></p><p>​        <strong>1.前端</strong></p><p>​        <strong>2.后端</strong></p><p><strong>3.用户管理（仅管理员可见）</strong></p><p>​        <strong>1.前端</strong></p><p>​        <strong>2.后端</strong></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h4 id="开启-Umi-UI可视化编程辅助工具-（仅在dev模式下出现）无法预览的问题"><a href="#开启-Umi-UI可视化编程辅助工具-（仅在dev模式下出现）无法预览的问题" class="headerlink" title="开启 Umi UI可视化编程辅助工具 （仅在dev模式下出现）无法预览的问题"></a>开启 Umi UI可视化编程辅助工具 （仅在dev模式下出现）无法预览的问题</h4><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>​            <strong>1.修改访问地址：C:\Windows\System32\drivers\etc\这个目录下的hosts文件</strong></p><p>​              <strong>在hosts下增加 如下代码 让raw.githubusercontent.com 指向 ip为 151.101.64.133 的url</strong></p><p>​            <strong>2.开启steam++</strong></p><h4 id="后端Maven引入依赖缺少某某依赖"><a href="#后端Maven引入依赖缺少某某依赖" class="headerlink" title="后端Maven引入依赖缺少某某依赖"></a><strong>后端Maven引入依赖缺少某某依赖</strong></h4><p>​        <strong>解决方案</strong></p><p>​            <strong>Maven包下载官方地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋秋八股文记录</title>
      <link href="/2022/11/13/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/13/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Java-基础-入门篇"><a href="#Java-基础-入门篇" class="headerlink" title="Java 基础 入门篇"></a><strong>Java 基础 入门篇</strong></h3><p>1.简单易学 2.面向对象（封装,继承,多态）3.平台无关性（java虚拟机实现平台无关性）4.可靠性 5.安全性 </p><p><strong>java JVM 和 JDK 解答</strong></p><p>1.JVM  JVM是运行在java字节码的虚拟机 JVM有针对不同系统的特定实现方式等</p><p>2.在java中 JVM可以理解的代码叫做字节码（后缀 .class 的文件）</p><p>java 程序从源代码到运行一般有三个步骤</p><p>.java文件（源代码） =&gt; .class (JVM可以理解为的java字节码) =&gt; 机器可以执行的二进制机器码</p><p><strong>== 和 equals的区别</strong></p><p>== ：他的作用是判断两个对象的地址是不是相等（比如 name=1 name=2 判断两个对象是不是同一个对象）基本数据类型比较的是值，引入数据比较的是内存地址地址</p><p>equals(): 他的作用也是判断两个对象是否相等 但是不能比较基本数据类型的变量</p><p><strong>重载和重写的区别</strong></p><p>1.重载就是同一个方法能够根据输入的数据不同做出不同的处理</p><p>2.重写 就是子类继承父类的方法输入数据一样但要做出有别于父类的相应 覆盖父类的方法</p><p><strong>重载 的介绍</strong></p><p>1.发生在同一个类中 方法名必须相同 参数类型不同 个数不同 顺序不同 方法返回值不同 和访问修饰服不同</p><p><strong>深拷贝 vs 浅拷贝</strong></p><p>1.浅拷贝 ： 对基本数据类型进行值传递 对引入数据类型进行引用传递般的拷贝 此为浅拷背</p><p>2.深拷贝 ： 对基本数据类型进行值传递 对引用数据类型创建一个新对象进行赋值其内容进行拷贝</p><p>通俗解释：浅拷贝新对象引用是老对象  深拷贝 是创建一个新的副本 进行拷贝  </p><p><strong>java 面向对象</strong></p><p>2.面向的对象和面向过程的区别 ：面向过程性能比面向对象高 因为类调用时需要实例化 开销较大 比较消耗资源 但是没有面向对象易维护，易副用，易扩展</p><p>2.面向对象 ：易维护，易复用，易扩展 因为面向对象有封装 继承 多态 的特性 使系统更容易维护，更加灵活，但是面向对象性能比面向过程底！</p><p><strong>面向对象三大特征</strong></p><p>封装：把一个对象的属性 隐藏在对象内部 不允许外部对象直接访问对象的内部信息但是可以提供一些方法给外部访问即操作属性</p><p>继承：子类拥有所有父类的属性和方法 但是父类的私有属性和方法是子类不可以访问的 只是拥有 子类可以拥有自己的属性和方法 可以对父类进行扩展 </p><p>多态：一个对象具有多种状态  </p><p>特点：</p><p>1.对象类型和引用类型具有继承的特点  </p><p>2.对象类型不变引用类型可变</p><p>3.方法具有多态性 属性没有</p><p><strong>集合的概念</strong></p><p>1：集合以类的形式存在，具有封装、继承、多态等类的特性，通过简单的方法和属性调用即可实现各种复杂操作，大大提高软件的开发效率。</p><p><strong>说组的概念</strong></p><p>1.可以理解为一个容器可以存放多个数据值</p><p><strong>try-catch-finally介绍：</strong></p><p>1.try：用于捕获异常 可以跟多个catch 也可以没有catch 但是必须有finally</p><p>2.catch：用于处理try捕获的异常信息</p><p>3.finally：无论捕获异常或者处理异常他都会执行 什么情况下不会执行？finally语句在第一行发生了错误不会执行，退出程序不会执行 关闭CPU不会执行</p><p><strong>IO 流分几种</strong></p><p>1.按照流的流向分 为输入流/和输出流</p><p>2.按照单元划分 字节流/和字符流</p><p>3.按照角色划分 节点流和处理流</p><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><p><strong>什么是Spring</strong></p><ol><li>Spring是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用Spring框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯</li></ol><p><strong>Spring的优点</strong></p><p> 1.方便解耦 简化开发</p><p> 2.AOP编程支持</p><p> 3.声明事务的支持</p><p> 4.方便程序的测试</p><p> 5.可以继承各种优秀开源框架</p><p> 6.降低javaApi的使用难度</p><p><strong>spring两大核心概念</strong></p><p>IOC (控制反转):控制反转也叫依赖注入</p><p>AOP（面向切面编程）:这是一种编程模式，他允许程序员通过自定义的横切点进行模块化，将那些影响多个类的行为封装到课重用的模块中。</p><p><strong>使用Spring框架的好处是什么</strong></p><p> 1.轻量 2.控制反转 3.面向切面 4.容器（对象的生命周期配置） 5.mvc框架（是web框架一个很好的替代品）</p><p> 6.事务管理 7.异常处理</p><p><strong>什么是spring依赖注入</strong></p><p>1.依赖注入是ioc的一个方面 是通常的概念 需要在配置文件引入xx依赖来完成你的系统 之后在ioc容器负责把他组装起来</p><p><strong>什么是SpringMVC框架</strong></p><ol><li>Spring配备构建Web应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</li></ol><p> <strong>Mvc框架的注解含义</strong></p><p>1.@Controller注解：该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用ServletAPI</p><p>2.@RequestMapping: 该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p><h3 id="什么是springboot-？"><a href="#什么是springboot-？" class="headerlink" title="什么是springboot ？"></a><strong>什么是springboot ？</strong></h3><p>用来简化spring应用的初始搭建以及开发过程 使用特定的方式来进行配置（<a href="https://so.csdn.net/so/search?q=properties&spm=1001.2101.3001.7020">properties</a>或yml文件）</p><p>创建独立的spring引用程序 main方法运行</p><p>嵌入的Tomcat 无需部署war文件</p><p>简化<a href="https://so.csdn.net/so/search?q=maven&spm=1001.2101.3001.7020">maven</a>配置</p><p><strong>总结：spring boot来简化spring进行程序开发！！！</strong></p><p><strong>Springboot有什么优点</strong></p><p>1.快速创建独立运行的spring项目与主流<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>集成</p><p>2.简化配置 ,自动配置</p><p>3.不用代码自动生成xml配置</p><p><strong>Spring Boot、Spring MVC 和 Spring 有什么区别？</strong></p><p>Spring：Sprin最重要的特征就是依赖注入</p><p>SpringMvc：Spring MVC 提供了一种分离式的方法来开发 Web 应用</p><p>SpringBoot：Spring 和 SpringMVC 的问题在于需要配置大量的参数而SpringBoot不需要Spring Boot 通过一个自动配置和启动的项来目解决这个问题。为了更快的构建产品就绪应用程序，Spring Boot 提供了一些非功能性特征</p><p><strong>什么是SpringBoot自动配置?</strong></p><p>Spring 查看（CLASSPATH 上可用的框架）已存在的应用程序的配置。在此基础上，Spring Boot 提供了配置应用程序和框架所需要的基本配置。这就是自动配置</p><ul><li><p>自动配好Tomcat</p></li><li><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><p><strong>Springboot核心注解</strong></p><p>1.在启动类上加上**@SpringBootApplication(打开自动配置)** <strong>@ComponentScan(Spring组件扫描)</strong></p><p><strong>SpringBoot如何启动？</strong></p><p>1.在启动类中运行 也就是mian方法</p><p>2.打包成jar包 用命令启动</p><p><strong>SpringBoot核心配置文件</strong></p><p>1.application(用与springboot项目自动配置文件)</p><p><strong>SpringBoot配置文件properties和yml文件的区别</strong></p><p>答：最主要的就是书写格式不同</p><p><strong>什么是Swagger？你用SpringBoot实现了它吗</strong></p><p>1.Swagger主要用于接口文档生成可视化API调试</p><p><strong>Springboot集成mybatis</strong></p><p>答：只需要引入mybatis依赖 在启动类上加上@Mapper在配置文件加上数据源的信息</p><p><strong>什么是 Mybatis</strong></p><p>1.Mybatis是数据持久层框架 内部封装了JDBC访问数据库的操作 只是普通的crud等操作 不过复杂的sql还需要自己写</p><p>优缺点？</p><p>优点：减少代码量加快开发 简单易学 </p><p>缺点：不支持复杂的sql导致对开发人员的sql功底有一定的要求 sql语句依赖于数据库 但是数据库不好移植 不可以随便更换数据库</p><p><strong>Mybatis-Plus ？</strong></p><p>Mybatis-Plus是基于Mybatis的增强版本</p><p><strong>RequestMapping和GetMapping的不同之处在哪里？</strong></p><p>RequestMapping:具有类属性 可以进行Get，POST，PUT,的请求犯法</p><p>GetMapping:是GET请求方法中的一个特例它只是ResquestMapping的一个延伸，目的是为了提高清晰度。</p><h3 id="SpringBoot-和-SpringCloud的优缺点"><a href="#SpringBoot-和-SpringCloud的优缺点" class="headerlink" title="SpringBoot 和 SpringCloud的优缺点"></a>SpringBoot 和 SpringCloud的优缺点</h3><p>1.SpringBoot更注重于加速开发单体应用</p><p>2.SpringCloud是关注全局的微服务管理框架 他将SpringBoot开发的一个个单体应用整合管理起来</p><p>3.SpringCloud 为 SpringBoot(开发的单体服务) 之间提供配置管理 服务发现 服务注册 断路器 路由</p><p>微代理 事件总线 全局锁 分布式会话等等集合服务</p><p>4.**SpringBoot可以离开SpringCloud单独开发项目但是 SpringCloud离不开SpringBoot **</p><p>解释：<strong>SpringCloud 依赖与 SpringBoot 类似于 婴儿和父母 婴儿离开服务能存活吗？</strong></p><p>SpringCloud由什么组成？</p><p>1.服务注册与发现（解释：把这个服务注册到远程的nasoc上可以别的服务通过注解(<strong>openFeign</strong>)进行调用）</p><p>2.服务网关（解释：相当于总入口把网络请求服务通过网关转发的具体指向那个服务模块）（常见的网关有？Nginx Zuul Gateway）</p><p>3.客户端负载均衡</p><p>4.声明性的Web服务客户端</p><p>5.断路器</p><p>6.分布式统一管理</p><p>等20几个框架</p><p><strong>Nginx 介绍</strong></p><p>1.Nginx是一个轻量级高新能的反向代理服务器他实现非常高校的反向代理，负载均衡</p><p><strong>为什么要用Nginx他的优缺点？</strong></p><p>优点：跨平台，配置简单，反向代理，高并发链接</p><p>缺点:动态代理差</p><p><strong>Nginx是怎么处理请求的？</strong></p><p>1.通过nginx的配置文件进行处理 server-name指令匹配server模块 在配置server模块里的location就是实际地址(如？localhost:8080//api/oss/ossFien)</p><p>什么是正向代理和反向代理</p><p>正向代理：直接请求真正的目标服务器地址</p><p>反向代理：所有的请求直接被Nginx接受 nginx反向代理服务器接受之后按照规则重定向给后端的业务处理服务器进行处理</p><h3 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a><strong>OAuth2</strong></h3><p><strong>什么是OAuth2</strong></p><p>​    OAuth 2.0 是目前流行的一种授权机制，用来授权第三方应用，获取用户数据。</p><p><strong>为什么需要用到OAuth2</strong></p><p>几乎每个人在使用一个APP或网页应用的时候都看过他们支持第三方登录比如微信登录、 QQ 登录、微博登录、 Google 账号登录、github 授权登录等等。这些都是典型的 OAuth2 使用场景。</p><p><strong>JWT 和 OAuth2</strong></p><p><strong>JWT是一种认证协</strong>议:JWT提供了一种用于发布接入令牌（Access Token)，并对发布的签名接入令牌进行验证的方法。 令牌（Token）本身包含了一系列声明，应用程序可以根据这些声明限制用户对资源的访问。</p><p><strong>OAuth2是一种授权框架</strong></p><p>授权第三方应用访问特定资源。</p><p>简答：他俩使用应用场景不一样</p><h4 id="Spring的生态"><a href="#Spring的生态" class="headerlink" title="Spring的生态"></a>Spring的生态</h4><ul><li>web开发</li><li>数据访问</li><li>安全控制</li><li>分布式</li><li>消息服务</li><li>移动开发</li><li>批处理</li></ul><h4 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h4><ul><li>创建独立Spring应用</li><li>创建独立Spring应用</li><li>自动starter依赖，简化构建配置</li><li>自动配置Spring以及第三方功能</li><li>提供生产级别的监控、健康检查及外部化配置</li><li>无代码生成、无需编写XML</li><li>SpringBoot是整合Spring技术栈的一站式框架</li><li>SpringBoot是简化Spring技术栈的快速开发脚手架</li></ul><h4 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h4><ul><li>封装太深，内部原理复杂，不容易精通</li></ul><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h4 id="分布式的困难"><a href="#分布式的困难" class="headerlink" title="分布式的困难"></a>分布式的困难</h4><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li></ul><h3 id="怎么解决分布式的困难"><a href="#怎么解决分布式的困难" class="headerlink" title="怎么解决分布式的困难"></a>怎么解决分布式的困难</h3><ul><li><strong>SpringBoot + SpringCloud</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这三年最大的收获</title>
      <link href="/2022/11/13/Hello/"/>
      <url>/2022/11/13/Hello/</url>
      
        <content type="html"><![CDATA[<h1 id="分享一段语音"><a href="#分享一段语音" class="headerlink" title="分享一段语音"></a>分享一段语音</h1><p><strong>这三年最大的收获，就是遇到的那些形形色色的人们,虽然他们有的让我深陷险地,有的帮我逃出泥沼但就是这样才让当年那个自大的我清醒了许多我现在觉得这里无比强大三年之约对我来说,就只不过是要完成一个年少轻狂的约定,给自己的这段成长,划上个句号而已</strong></p><audio id="audio" controls="" preload="none"><source id="mp3" src="/Mp4/这三年最大的收获.mp3"></audio>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
